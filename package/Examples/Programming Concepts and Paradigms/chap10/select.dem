% File "select.dem".
% Generate a random list of 10 elements and sort using selection sort.

procedure swap (var list : array 1 .. * of string (*), i, j : int)
    const temp := list (i)
    list (i) := list (j)
    list (j) := temp
end swap

procedure shift (var list : array 1 .. * of string (*), i, j : int)
    const temp := list (j)
    for decreasing k : j .. i + 1
        list (k) := list (k - 1)
    end for
    list (i) := temp
end shift

procedure fakeData (var list : array 1 .. * of string (*),
        numberOfElements : int)
    for i : 1 .. numberOfElements
        list (i) := "" % Null string.
        for letterIndex : 1 .. 4 % Pick four letters at random.
            list (i) += chr (Rand.Int (ord ("a"), ord ("z")))
        end for
    end for
end fakeData

procedure printList10 (list : array 1 .. * of string (*))
    for i : 1 .. 10
        put list (i), " " ..
    end for
    put ""
end printList10

% Sort list of strings by selection.
procedure selectSort (var list : array 1 .. * of string(*), 
                                numberOfElements : int)
    % Sort list of strings by selection.
    for i : 1 .. numberOfElements - 1
        % Invariant: list (1 .. i - 1) is sorted.
        % Select smallest element.
        var locationOfSmallest := i
        for j : i + 1 .. numberOfElements
            if list (j) <= list (locationOfSmallest) then
                locationOfSmallest := j
            end if
        end for
        swap (list, i, locationOfSmallest)
        % Temporary statements to trace execution.
        put i : 3, locationOfSmallest : 3, " " ..
        printList10 (list)
    end for
end selectSort

var list : array 1 .. 10 of string (4)
fakeData (list, 10)
printList10 (list)
selectSort (list, 10)
printList10 (list)


